function nodeIDs = findBoundaryLayerNodes(GRID, lineCoords, dx, m, normalDirection)
%% findBoundaryLayerNodes.m
% Title          : Boundary layer node selector (exact m layers)
% Author         : Przemysław Nosal
% ORCID          : 0000-0001-9751-0071
% Affiliation    : AGH University of Krakow
% Contact        : pnosal@agh.edu.pl
% Date           : 2025-04-28
% Version        : 2.1
% Description    : 
%   Identifies nodes in a boundary layer of exactly m layers 
%   based on regular grid spacing (dx) around a given line segment.
%   Designed for NOSB Peridynamics boundary condition application.
%   No tolerance used — pure grid-based selection.
% Dependencies   : GRID structure generated by gridGenerator.m
% License        : CC-BY 4.0
%
% -------------------------------------------------------------------------
% INPUTS:
% GRID            – node matrix [nodeID, x, y, (z), mass_factor]
% lineCoords      – line segment coordinates [x1, y1, x2, y2]
% dx              – grid spacing [mm]
% m               – number of layers (delta = m * dx)
% normalDirection – side of normal (+1: right, -1: left)
%
% OUTPUTS:
% nodeIDs         – column vector of node IDs in the boundary layer
%
% LOCAL VARIABLES:
% tangent, normal – normalized segment direction and normal vector
% t_proj, n_proj  – node projections onto segment frame
% t_mask, n_mask  – logical masks for filtering nodes
% -------------------------------------------------------------------------

    if size(GRID,2) < 3
        error('GRID must contain at least [id, x, y] columns.');
    end

    x1 = lineCoords(1); y1 = lineCoords(2);
    x2 = lineCoords(3); y2 = lineCoords(4);

    tangent = [x2 - x1; y2 - y1];
    tangentLength = norm(tangent);
    if tangentLength == 0
        error('Line segment length is zero.');
    end
    tangent = tangent / tangentLength;

    normal = normalDirection * [0 -1; 1 0] * tangent;

    P = GRID(:,2:3)';
    R = P - [x1; y1];

    t_proj = dot(R, repmat(tangent,1,size(R,2)));
    n_proj = dot(R, repmat(normal,1,size(R,2)));

    t_mask = (t_proj >= -0.5*dx) & (t_proj <= tangentLength + 0.5*dx);
    n_mask = (n_proj >= -0.5*dx) & (n_proj < (m-0.5)*dx);

    nodeIDs = find(t_mask & n_mask);
    nodeIDs = nodeIDs(:); % make sure it's a column vector
end
