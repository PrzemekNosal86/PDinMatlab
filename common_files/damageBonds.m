function [INI_TIME, INI_STATE] = damageBonds(INIBOND, INI_TIME, INI_STATE, pnodes, Def, Xi, critical_strain, ii)
%% damageBonds.m
% Title: Bond damage evaluation in non-ordinary state-based peridynamics
% Author: Przemysław Nosal
% ORCID: 0000-0001-9751-0071
% Affiliation: AGH University of Krakow
% Contact: pnosal@agh.edu.pl
% Date: 2025-04-25
% Version: 1.0
% Description: Identifies and updates broken bonds based on the critical 
%              bond stretch criterion. A bond is considered broken when 
%              its relative elongation exceeds a critical strain threshold. 
%              The damage state and the time step of failure are recorded.
% Dependencies: INIBOND structure generated by gridGenerator.m
% License: CC-BY 4.0

% -------------------------------------------------------------------------
% INPUTS:
% INIBOND         – matrix of bond connectivity: each row starts with a 
%                   source node followed by its family node indices
% INI_TIME        – matrix (same size as INIBOND) with breaking time step 
%                   for each bond (0 = not broken)
% INI_STATE       – logical vector (length = number of nodes); true if 
%                   at least one bond connected to the node is broken
% pnodes          – total number of nodes to process
% Def             – global displacement vector [3*pnodes x 1], ordered as 
%                   [u_x1; u_y1; u_z1; u_x2; ...]
% Xi              – matrix of initial bond lengths (same size as INIBOND)
% critical_strain – scalar value of critical stretch (threshold)
% ii              – current time step index
%
% OUTPUTS:
% INI_TIME        – updated matrix with recorded breaking times
% INI_STATE       – updated logical vector indicating damaged nodes
%
% LOCAL VARIABLES:
% newlen          – current bond length between node pairs
% s_bond          – computed stretch (relative elongation)
% non_zero        – number of non-zero elements in INIBOND row
% -------------------------------------------------------------------------

for jj = 1:pnodes
    non_zero = nnz(INIBOND(jj, :));  % number of valid bonds (non-zero entries)

    for ll = 2:non_zero  % skip the first column (source node itself)

        if INI_TIME(jj, ll) == 0  % bond not yet broken
            % Calculate new length of the bond between source and family node
            newlen = norm(Def(INIBOND(jj, ll) * 3 - 2 : INIBOND(jj, ll) * 3 - 1) - ...
                          Def(INIBOND(jj, 1) * 3 - 2 : INIBOND(jj, 1) * 3 - 1));

            % Compute bond stretch
            s_bond = (newlen - Xi(jj, ll)) / Xi(jj, ll);

            % Check for bond failure
            if s_bond > critical_strain
                INI_STATE(jj) = true;
                INI_TIME(jj, ll) = ii;  % record breaking time step
            end
        end
    end
end

% NOTE: Optionally, a stiffness matrix update may follow here, removing
% broken bonds for future calculations.
% Example:
% INIBOND_rid = INIBOND(INI_STATE,:);
% INI_TIME_rid = INI_TIME(INI_STATE,:);